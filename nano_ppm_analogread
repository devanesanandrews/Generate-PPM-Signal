////////////////////// PPM CONFIGURATION//////////////////////////
#define channel_number 6  //Number of channels
#define sigPin 2          //PPM output pin
#define PPM_FrLen 27000
#define PPM_PulseLen 400
#define clockMultiplier 2  // set this to 2 if you are using a 16MHz arduino, leave as 1 for an 8MHz arduino

int ppm[channel_number];

void setupPPM() {
  pinMode(sigPin, OUTPUT);
  digitalWrite(sigPin, 0);  //set the PPM signal pin to the default state (off)

  cli();
  TCCR1A = 0;  // set entire TCCR1 register to 0
  TCCR1B = 0;

  OCR1A = 100;              // compare match register (not very important, sets the timeout for the first interrupt)
  TCCR1B |= (1 << WGM12);   // turn on CTC mode
  TCCR1B |= (1 << CS11);    // 8 prescaler: 0,5 microseconds at 16mhz
  TIMSK1 |= (1 << OCIE1A);  // enable timer compare interrupt
  sei();
}

void setup() {
  setupPPM();
}


void loop() {

  ppm[0] = map(analogRead(A0), 0, 1024, 1000, 2000);
  ppm[1] = map(analogRead(A1), 0, 1024, 1000, 2000);
  ppm[2] = map(analogRead(A2), 0, 1024, 1000, 2000);
  ppm[3] = map(analogRead(A3), 0, 1024, 1000, 2000);
  ppm[4] = map(analogRead(A4), 0, 1024, 1000, 2000);
  ppm[5] = map(analogRead(A5), 0, 1024, 1000, 2000);
}


ISR(TIMER1_COMPA_vect) {
  static boolean state = true;

  TCNT1 = 0;

  if (state) {
    //end pulse
    PORTD = PORTD & ~B00000100;
    OCR1A = PPM_PulseLen * clockMultiplier;
    state = false;
  } else {
    //start pulse
    static byte cur_chan_numb;
    static unsigned int calc_rest;

    PORTD = PORTD | B00000100;
    state = true;

    if (cur_chan_numb >= channel_number) {
      cur_chan_numb = 0;
      calc_rest += PPM_PulseLen;
      OCR1A = (PPM_FrLen - calc_rest) * clockMultiplier;
      calc_rest = 0;
    } else {
      OCR1A = (ppm[cur_chan_numb] - PPM_PulseLen) * clockMultiplier;
      calc_rest += ppm[cur_chan_numb];
      cur_chan_numb++;
    }
  }
}
